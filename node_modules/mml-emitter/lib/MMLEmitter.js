"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _seqEmitter = require("seq-emitter");

var _seqEmitter2 = _interopRequireDefault(_seqEmitter);

var _mmlIterator = require("mml-iterator");

var _mmlIterator2 = _interopRequireDefault(_mmlIterator);

var _reverseOctave = require("./reverseOctave");

var _reverseOctave2 = _interopRequireDefault(_reverseOctave);

var _stripComments = require("strip-comments");

var _stripComments2 = _interopRequireDefault(_stripComments);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MMLEmitter = (function (_SeqEmitter) {
  _inherits(MMLEmitter, _SeqEmitter);

  function MMLEmitter(source) {
    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, MMLEmitter);

    if (config.reverseOctave) {
      source = (0, _reverseOctave2.default)(source);
    }

    var MMLIteratorClass = config.MMLIterator || _mmlIterator2.default;
    var tracks = (0, _stripComments2.default)(source).split(";");

    tracks = tracks.filter(function (source) {
      return !!source.trim();
    });
    tracks = tracks.map(function (track) {
      return new MMLIteratorClass(track, config);
    });

    return _possibleConstructorReturn(this, Object.getPrototypeOf(MMLEmitter).call(this, tracks, config));
  }

  return MMLEmitter;
})(_seqEmitter2.default);

exports.default = MMLEmitter;