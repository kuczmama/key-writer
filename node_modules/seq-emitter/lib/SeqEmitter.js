"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _events = require("events");

var _TrackIterator = require("./TrackIterator");

var _TrackIterator2 = _interopRequireDefault(_TrackIterator);

var _webAudioScheduler = require("web-audio-scheduler");

var _webAudioScheduler2 = _interopRequireDefault(_webAudioScheduler);

var _objectAssign = require("object-assign");

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SeqEmitter = (function (_EventEmitter) {
  _inherits(SeqEmitter, _EventEmitter);

  function SeqEmitter(tracks) {
    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, SeqEmitter);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SeqEmitter).call(this));

    if (config.scheduler) {
      _this._scheduler = config.scheduler;
      _this._ownScheduler = false;
    } else {
      _this._scheduler = new _webAudioScheduler2.default(config);
      _this._ownScheduler = true;
    }

    _this._tracks = tracks.map(function (track, trackNumber) {
      return new _TrackIterator2.default(track, _this._scheduler.interval, trackNumber);
    });
    _this._startTime = -1;
    _this._stopTime = -1;
    _this._timerId = 0;
    _this._state = "suspended";
    return _this;
  }

  _createClass(SeqEmitter, [{
    key: "start",
    value: function start() {
      var _this2 = this;

      var t0 = arguments.length <= 0 || arguments[0] === undefined ? this._scheduler.currentTime : arguments[0];

      if (this._startTime === -1) {
        this._startTime = t0;
        if (this._ownScheduler) {
          this._scheduler.start();
        }
        this._timerId = this._scheduler.insert(t0, function (e) {
          _this2._state = "running";
          _this2.emit("statechange", { type: "statechange", playbackTime: t0, state: _this2._state });
          _this2._process(e.playbackTime);
        });
      } else {
        /* istanbul ignore else */
        /* eslint no-lonely-if: 0 */
        if (this._startTime !== -1) {
          global.console.warn("Failed to execute 'start' on SeqEmitter: cannot call start more than once.");
        }
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      var _this3 = this;

      var t0 = arguments.length <= 0 || arguments[0] === undefined ? this._scheduler.currentTime : arguments[0];

      if (this._startTime !== -1 && this._stopTime === -1) {
        this._stopTime = t0;
        this._scheduler.insert(t0, function () {
          _this3._state = "closed";
          _this3.emit("statechange", { type: "statechange", playbackTime: t0, state: _this3._state });
          if (_this3._ownScheduler) {
            _this3._scheduler.stop();
          }
          _this3._scheduler.remove(_this3._timerId);
          _this3._timerId = 0;
        });
      } else {
        if (this._startTime === -1) {
          global.console.warn("Failed to execute 'stop' on SeqEmitter: cannot call stop without calling start first.");
        }
        if (this._stopTime !== -1) {
          global.console.warn("Failed to execute 'stop' on SeqEmitter: cannot call stop more than once.");
        }
      }
    }
  }, {
    key: "_process",
    value: function _process(playbackTime) {
      var _this4 = this;

      this._tracks.forEach(function (iter) {
        var iterItem = iter.next();

        _this4._emitEvent(iterItem.value, iter.trackNumber);
      });

      this._tracks = this._tracks.filter(function (iter) {
        return !iter.done;
      });

      if (this._tracks.length === 0) {
        this.emit("end:all", { type: "end:all", playbackTime: playbackTime });
      } else {
        var nextPlaybackTime = playbackTime + this._scheduler.interval;

        this._timerId = this._scheduler.insert(nextPlaybackTime, function (e) {
          _this4._process(e.playbackTime);
        });
      }
    }
  }, {
    key: "_emitEvent",
    value: function _emitEvent(events, trackNumber) {
      var _this5 = this;

      events.forEach(function (items) {
        var type = items.type;
        var playbackTime = _this5._startTime + items.time;

        if (typeof type === "string") {
          _this5.emit(type, (0, _objectAssign2.default)({ playbackTime: playbackTime, trackNumber: trackNumber }, items));
        }
      });
    }
  }, {
    key: "scheduler",
    get: function get() {
      return this._scheduler;
    }
  }, {
    key: "state",
    get: function get() {
      return this._state;
    }
  }]);

  return SeqEmitter;
})(_events.EventEmitter);

exports.default = SeqEmitter;