"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Syntax = require("./Syntax");
var DefaultParams = require("./DefaultParams");
var MMLParser = require("./MMLParser");
var ITERATOR = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";

var MMLIterator = function () {
  function MMLIterator(source) {
    _classCallCheck(this, MMLIterator);

    this.source = source;

    this._commands = new MMLParser(source).parse();
    this._commandIndex = 0;
    this._processedTime = 0;
    this._iterator = null;
    this._octave = DefaultParams.octave;
    this._noteLength = [DefaultParams.length];
    this._velocity = DefaultParams.velocity;
    this._quantize = DefaultParams.quantize;
    this._tempo = DefaultParams.tempo;
    this._infiniteLoopIndex = -1;
    this._loopStack = [];
    this._done = false;
  }

  _createClass(MMLIterator, [{
    key: "hasNext",
    value: function hasNext() {
      return this._commandIndex < this._commands.length;
    }
  }, {
    key: "next",
    value: function next() {
      if (this._done) {
        return { done: true, value: null };
      }

      if (this._iterator) {
        var iterItem = this._iterator.next();

        if (!iterItem.done) {
          return iterItem;
        }
      }

      var command = this._forward(true);

      if (isNoteEvent(command)) {
        this._iterator = this[command.type](command);
      } else {
        this._done = true;
        return { done: false, value: { type: "end", time: this._processedTime } };
      }

      return this.next();
    }
  }, {
    key: ITERATOR,
    value: function value() {
      return this;
    }
  }, {
    key: "_forward",
    value: function _forward(forward) {
      while (this.hasNext() && !isNoteEvent(this._commands[this._commandIndex])) {
        var command = this._commands[this._commandIndex++];

        this[command.type](command);
      }

      if (forward && !this.hasNext() && this._infiniteLoopIndex !== -1) {
        this._commandIndex = this._infiniteLoopIndex;

        return this._forward(false);
      }

      return this._commands[this._commandIndex++] || {};
    }
  }, {
    key: "_calcDuration",
    value: function _calcDuration(noteLength) {
      var _this = this;

      if (noteLength[0] === null) {
        noteLength = this._noteLength.concat(noteLength.slice(1));
      }

      var prev = null;
      var dotted = 0;

      noteLength = noteLength.map(function (elem) {
        switch (elem) {
          case null:
            elem = prev;
            break;
          case 0:
            elem = dotted *= 2;
            break;
          default:
            prev = dotted = elem;
            break;
        }

        var length = elem !== null ? elem : DefaultParams.length;

        return 60 / _this._tempo * (4 / length);
      });

      return noteLength.reduce(function (a, b) {
        return a + b;
      }, 0);
    }
  }, {
    key: "_calcNoteNumber",
    value: function _calcNoteNumber(noteNumber) {
      return noteNumber + this._octave * 12 + 12;
    }
  }, {
    key: Syntax.Note,
    value: function value(command) {
      var _this2 = this;

      var type = "note";
      var time = this._processedTime;
      var duration = this._calcDuration(command.noteLength);
      var noteNumbers = command.noteNumbers.map(function (noteNumber) {
        return _this2._calcNoteNumber(noteNumber);
      });
      var quantize = this._quantize;
      var velocity = this._velocity;

      this._processedTime = this._processedTime + duration;

      return arrayToIterator(noteNumbers.map(function (noteNumber) {
        return { type: type, time: time, duration: duration, noteNumber: noteNumber, velocity: velocity, quantize: quantize };
      }));
    }
  }, {
    key: Syntax.Rest,
    value: function value(command) {
      var duration = this._calcDuration(command.noteLength);

      this._processedTime = this._processedTime + duration;
    }
  }, {
    key: Syntax.Octave,
    value: function value(command) {
      this._octave = command.value !== null ? command.value : DefaultParams.octave;
    }
  }, {
    key: Syntax.OctaveShift,
    value: function value(command) {
      var value = command.value !== null ? command.value : 1;

      this._octave += value * command.direction;
    }
  }, {
    key: Syntax.NoteLength,
    value: function value(command) {
      var noteLength = command.noteLength.map(function (value) {
        return value !== null ? value : DefaultParams.length;
      });

      this._noteLength = noteLength;
    }
  }, {
    key: Syntax.NoteVelocity,
    value: function value(command) {
      this._velocity = command.value !== null ? command.value : DefaultParams.velocity;
    }
  }, {
    key: Syntax.NoteQuantize,
    value: function value(command) {
      this._quantize = command.value !== null ? command.value : DefaultParams.quantize;
    }
  }, {
    key: Syntax.Tempo,
    value: function value(command) {
      this._tempo = command.value !== null ? command.value : DefaultParams.tempo;
    }
  }, {
    key: Syntax.InfiniteLoop,
    value: function value() {
      this._infiniteLoopIndex = this._commandIndex;
    }
  }, {
    key: Syntax.LoopBegin,
    value: function value(command) {
      var loopCount = command.value !== null ? command.value : DefaultParams.loopCount;
      var loopTopIndex = this._commandIndex;
      var loopOutIndex = -1;

      this._loopStack.push({ loopCount: loopCount, loopTopIndex: loopTopIndex, loopOutIndex: loopOutIndex });
    }
  }, {
    key: Syntax.LoopExit,
    value: function value() {
      var looper = this._loopStack[this._loopStack.length - 1];

      var index = this._commandIndex;

      if (looper.loopCount <= 1 && looper.loopOutIndex !== -1) {
        index = looper.loopOutIndex;
      }

      this._commandIndex = index;
    }
  }, {
    key: Syntax.LoopEnd,
    value: function value() {
      var looper = this._loopStack[this._loopStack.length - 1];

      var index = this._commandIndex;

      if (looper.loopOutIndex === -1) {
        looper.loopOutIndex = this._commandIndex;
      }
      looper.loopCount -= 1;

      if (0 < looper.loopCount) {
        index = looper.loopTopIndex;
      } else {
        this._loopStack.pop();
      }

      this._commandIndex = index;
    }
  }]);

  return MMLIterator;
}();

function arrayToIterator(array) {
  var index = 0;

  return {
    next: function next() {
      if (index < array.length) {
        return { done: false, value: array[index++] };
      }
      return { done: true };
    }
  };
}

function isNoteEvent(command) {
  return command.type === Syntax.Note || command.type === Syntax.Rest;
}

module.exports = MMLIterator;