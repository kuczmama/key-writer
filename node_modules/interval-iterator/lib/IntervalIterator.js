"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ITERATOR = typeof Symbol !== "undefined" ? Symbol.iterator : "Symbol(Symbol.iterator)";

var IntervalIterator = (function () {
  function IntervalIterator(iter, interval) {
    _classCallCheck(this, IntervalIterator);

    this._iter = iter;
    this._interval = +interval;
    this._currentTime = 0;
    this._iterItem = null;
    this._done = false;
  }

  _createClass(IntervalIterator, [{
    key: "next",
    value: function next() {
      var t0 = this._currentTime + this._interval;

      if (this._done) {
        return { done: true, value: [] };
      }

      var result = [];
      var iterItem = undefined;

      while ((iterItem = this._next(t0)) !== null) {
        result.push(iterItem);
      }

      this._currentTime = t0;

      return { done: false, value: result };
    }
  }, {
    key: ITERATOR,
    value: function value() {
      return this;
    }
  }, {
    key: "_next",
    value: function _next(t0) {
      if (this._iterItem) {
        return this._nextIterItem(t0);
      }

      var iterItem = this._iter.next();

      if (!iterItem.done) {
        this._iterItem = iterItem.value;

        return this._nextIterItem(t0);
      }

      this._done = true;

      return null;
    }
  }, {
    key: "_nextIterItem",
    value: function _nextIterItem(t0) {
      if (t0 <= this._iterItem.time) {
        return null;
      }

      var iterItem = this._iterItem;

      this._iterItem = null;

      return iterItem;
    }
  }]);

  return IntervalIterator;
})();

exports["default"] = IntervalIterator;
module.exports = exports["default"];